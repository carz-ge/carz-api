enum OrderStatus {
    NEW
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
    REJECTED
    REIMBURSED
    FAILED
}

input OrderedProductInput {
    productId: ID!
    packageId: ID!
    schedulingDay: String
    schedulingTime: String
}

type OrderedProduct {
    productId: ID!
    packageId: ID!
    schedulingDay: String
    schedulingTime: String
}

type Order {
    id: ID!
    userId: ID!
    categoryId: ID!
    providerId: ID
    productId: ID!
    packageId: ID!
    schedulingDay: String
    schedulingTime: String
    orderStatus: OrderStatus
}

input OrderInput {
    idempotencyKey: String!
    productId: ID!
    packageId: ID!
    schedulingDay: String
    schedulingTime: String

    carType: CarType
    carPlateNumber: String
    # one of
    carId: ID

    comment: String
}

type OrderInitializationResponse {
    id: ID!
    idempotencyKey: String!
    redirectLink: String!
    totalPrice: Int!
    productId: ID!
    categoryId: ID!
    packageId: ID!
    providerId: ID!
    schedulingDay: String
    schedulingTime: String
    orderStatus: OrderStatus
}

extend type Query {
    listOrders: [Order!]!
    getOrder(id: ID!): Order!
}

extend type Mutation {
    # create a new order
    createOrder(order: OrderInput!): OrderInitializationResponse!
    # cancelOrder(): Order!
}
