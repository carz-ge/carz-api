enum OrderStatus {
    NEW
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
    REJECTED
    REIMBURSED
}

type OrderedProduct {
    productId: ID!
    quantity: Int
    schedulingDate: String
    schedulingTime: String
}

type Order {
    id: ID!
    userId: ID!
    categoryId: ID!
    providerId: ID
    products: [OrderedProduct]
    orderStatus: OrderStatus
}

input OrderInput {
    idempotencyKey: String!
    categoryId: ID!
    packages: [OrderedProductInput!]!

    carId: ID
    # one of
    carType: CarType
    carPlateNumber: String

    # schedulingId: String
    schedulingDay: String
    schedulingTime: String
}

input OrderedProductInput {
    productId: ID!,
    productDetailsId: ID!
    schedulingDay: String
    schedulingTime: String
}

extend type Query {
    listOrders: [Order!]!
    getOrder(id: ID!): Order!
    listOrdersByUserId(userId: ID!): [Order!]!
}

extend type Mutation {
    # create a new order
    createOrder(order: OrderInput!): Order!
    # cancelOrder(): Order!

    # TODO: lock product for checkout
}
