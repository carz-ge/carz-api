enum OrderStatus {
    NEW
    PROCESSING
    PAYED
    WAITING_MANAGER
    ACTIVE
    CANCELLED
    CANCELLED_BY_MANAGER
    REJECTED
    REIMBURSED
    FAILED
}

input OrderedProductInput {
    productId: ID!
    packageId: ID!
    schedulingDay: String
    schedulingTime: String
}

type OrderedProduct {
    productId: ID!
    packageId: ID!
    schedulingDay: String
    schedulingTime: String
}

type Order {
    id: ID!
    totalPrice: Int!
    commission: Int!
    status: OrderStatus
    productId: ID!
    packageId: ID!
    categoryId: ID!
    providerId: ID
    schedulingDay: String
    schedulingTime: String
    carType: CarType
    carPlateNumber: String
    errorMessage: String
    createdAt: String
    updatedAt: String

}

input OrderInput {
    idempotencyKey: String!
    productId: ID!
    packageId: ID!
    schedulingDay: String
    schedulingTime: String

    carType: CarType
    carPlateNumber: String
    # one of
    carId: ID

    comment: String
}

type OrderInitializationResponse {
    id: ID!
    idempotencyKey: String!
    redirectLink: String!
    totalPrice: Int!
    commission: Int!
    productId: ID!
    packageId: ID!
    categoryId: ID!
    providerId: ID!
    schedulingDay: String
    schedulingTime: String
    status: OrderStatus
    carType: CarType
    carPlateNumber: String
    errorMessage: String
    createdAt: String
}


type Commission {
    commission: Int!
    commissionToShow: String!
}

extend type Query {
    listOrders: [Order!]!
    listOrdersByManager: [Order!]!

    getOrder(id: ID!): Order!

    getCommission(productId: ID!, packageId: ID): Commission!
}

extend type Mutation {
    # create a new order
    createOrder(order: OrderInput!): OrderInitializationResponse!
    # cancelOrder(): Order!
}
